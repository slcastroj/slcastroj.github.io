{"version":3,"sources":["State/PostType.tsx","Components/PostSummary.tsx","State/PostCategory.tsx","State/StoreActionType.tsx","State/ActionCreators.tsx","Components/PostingForm.tsx","Components/PostFeed.tsx","Components/HelpLines.tsx","Components/Home.tsx","Components/Header.tsx","Components/CommentFeed.tsx","Components/CommentForm.tsx","Components/CommentSection.tsx","Components/PostPage.tsx","Components/ForumSelector.tsx","Components/WithTitle.tsx","Components/LoginPage.tsx","Components/SignupForward.tsx","App.tsx","serviceWorker.ts","State/StoreReducer.tsx","State/MyStore.tsx","index.tsx"],"names":["PostType","PostSummary","props","to","id","toString","className","title","publicationDate","toLocaleString","author","content","slice","PostCategory","ADD_COMMENT","SIGNUP","LOGIN","LOGOUT","ADD_POST","initialState","EnhancedPostingForm","connect","dispatch","category","onPost","type","addPostBuilder","useState","state","setState","onInputChange","e","target","name","update","$set","value","onSubmit","preventDefault","onChange","rows","style","resize","onClick","PostFeed","posts","length","map","post","key","publicPosting","getPostByType","filter","x","SystemPostFeed","System","User","getPostByCategory","GeneralPostFeed","General","HelpPostFeed","Help","QuestionsPostFeed","Question","OfftopicPostFeed","Offtopic","HelpLines","Home","Header","user","href","onLogout","EnhancedHeader","CommentFeed","comments","i","CommentForm","render","onAddComment","onContentChange","currentTarget","reset","postId","Component","EnhancedCommentForm","addCommentBuilder","EnhancedCommentSection","find","height","overflowY","overflowX","EnhancedPostPage","Date","IdentifiedPost","useParams","parseInt","ForumSelector","pathname","useLocation","WithTitle","children","nowMinus16","setFullYear","getFullYear","nm16","toISOString","login","signup","birth","EnhancedLoginPage","onSignup","info","signupBuilder","onLogin","loginBuilder","onSignupChange","firstName","lastName","email","username","password","onLoginChange","max","SignupForward","App","exact","path","React","Boolean","window","location","hostname","match","isLoggedIn","users","Announcement","MyStore","createStore","action","$push","undefined","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAAKA,E,wFCOQC,G,MAAc,SAACC,GACxB,OAAO,kBAAC,IAAD,CAAMC,GAAE,iBAAYD,EAAME,GAAGC,aAChC,6BAASC,UAAU,2CACf,yBAAKA,UAAU,SACX,4BAAKJ,EAAMK,QAEf,yBAAKD,UAAU,oBACX,2BAAOA,UAAU,cAAjB,uBAA+CJ,EAAMM,gBAAgBC,iBAArE,gBAA6FP,EAAMQ,UAEvG,yBAAKJ,UAAU,4BACVJ,EAAMS,QAAQC,MAAM,EAAG,U,iBDjBnCZ,O,eAAAA,I,oBAAAA,M,KAKUA,IELVa,EFKUb,K,SELVa,O,qBAAAA,I,eAAAA,I,uBAAAA,I,uBAAAA,I,gCAAAA,M,KAQUA,Q,gCCNFC,EAAc,cACdC,EAAS,SACTC,EAAQ,QACRC,EAAS,SACTC,EAAW,W,yjBCFjB,ICaDC,EAAe,CACjBZ,MAAO,GACPI,QAAS,IA4CAS,EAAsBC,YAAQ,MAPZ,SAACC,EAAoBpB,GAChD,MAAO,CACHqB,SAAUrB,EAAMqB,SAChBC,OAAQ,SAACjB,EAAeI,GAAhB,OAAoCW,ED1BtB,SAACf,EAAeI,EAAiBY,GAC3D,MAAO,CACHE,KAAMP,EACNX,MAAOA,EACPI,QAASA,EACTY,SAAUA,GCqB2CG,CAAenB,EAAOI,EAAST,EAAMqB,eAI/DF,EAzCR,SAACnB,GAA8B,IAAD,EAC3ByB,mBAA4BR,GADD,mBAC9CS,EAD8C,KACvCC,EADuC,KAGrD,SAASC,EAAcC,GACnB,OAAQA,EAAEC,OAAOC,MACb,IAAK,QAED,YADAJ,EAASK,IAAON,EAAO,CAAErB,MAAO,CAAE4B,KAAMJ,EAAEC,OAAOI,UAErD,IAAK,UAED,YADAP,EAASK,IAAON,EAAO,CAAEjB,QAAS,CAAEwB,KAAMJ,EAAEC,OAAOI,WAU/D,OAAO,0BAAM9B,UAAU,kBAAkB+B,SAAU,SAACN,GAAD,OAAOA,EAAEO,mBACxD,yBAAKhC,UAAU,eACX,6CACA,2BAAOmB,KAAK,OAAOQ,KAAK,QAAQG,MAAOR,EAAMrB,MAAOD,UAAU,eAAeiC,SAAUT,KAE3F,yBAAKxB,UAAU,eACX,6CACA,8BAAU2B,KAAK,UAAUO,KAAM,EAAGJ,MAAOR,EAAMjB,QAAS8B,MAAO,CAAEC,OAAQ,QAAUpC,UAAU,eAAeiC,SAAUT,KAE1H,yBAAKxB,UAAU,qBACX,4BAAQA,UAAU,kBAAkBqC,QAf5C,WAAmB,IACPpC,EAAmBqB,EAAnBrB,MAAOI,EAAYiB,EAAZjB,QACfT,EAAMsB,OAAOjB,EAAOI,KAahB,iBCnCCiC,EAAW,SAAC1C,GACrB,OAAO,6BAASI,UAAW,gBAAkBJ,EAAMI,WAC/C,yBAAKA,UAAU,OACVJ,EAAM2C,MAAMC,OAAS,GAAK5C,EAAM2C,MAAME,KAAI,SAAAC,GAAI,OAC3C,kBAAC,EAAD,CACIC,IAAKD,EAAK5C,GACVA,GAAI4C,EAAK5C,GACTM,OAAQsC,EAAKtC,OACbH,MAAOyC,EAAKzC,MACZI,QAASqC,EAAKrC,QACdH,gBAAiBwC,EAAKxC,gBACtBe,SAAUyB,EAAKzB,SACfE,KAAMuB,EAAKvB,UAElBvB,EAAM2C,MAAMC,QAAU,GAAK,uBAAGxC,UAAU,QAAb,4BAE/BJ,EAAMgD,eAAiB,oCACpB,yBAAK5C,UAAU,uBACf,yBAAKA,UAAU,SACX,wBAAIA,UAAU,QAAd,mCACA,kBAACc,EAAD,CAAqBG,SAAUrB,EAAMqB,eAMrD,SAAS4B,EAAcN,EAAgBpB,GACnC,OAAOoB,EAAMO,QAAO,SAAAC,GAAC,OAAIA,EAAE5B,OAASA,KAOxC,IAOa6B,EAAiBjC,aAPN,SAACO,EAAoB1B,GACzC,MAAO,CACH2C,MAAOM,EAAcvB,EAAMiB,MAAO7C,EAASuD,QAC3CjD,UAAWJ,EAAMI,UACjB4C,cAAehD,EAAMgD,gBAAiB,KAGhB7B,CAAyBuB,GAS3BvB,aAPN,SAACO,EAAoB1B,GACvC,MAAO,CACH2C,MAAOM,EAAcvB,EAAMiB,MAAO7C,EAASwD,MAC3ClD,UAAWJ,EAAMI,UACjB4C,cAAehD,EAAMgD,gBAAiB,KAGlB7B,CAAuBuB,GAEnD,SAASa,EAAkBZ,EAAgBtB,GACvC,OAAOsB,EAAMO,QAAO,SAAAC,GAAC,OAAIA,EAAE9B,WAAaA,KAG5C,IAQamC,EAAkBrC,aARN,SAACO,EAAoB1B,GAC1C,MAAO,CACH2C,MAAOY,EAAkBN,EAAcvB,EAAMiB,MAAO7C,EAASwD,MAAO3C,EAAa8C,SACjFrD,UAAWJ,EAAMI,UACjB4C,cAAehD,EAAMgD,gBAAiB,EACtC3B,SAAUV,EAAa8C,WAGAtC,CAA0BuB,GAU5CgB,EAAevC,aARN,SAACO,EAAoB1B,GACvC,MAAO,CACH2C,MAAOY,EAAkBN,EAAcvB,EAAMiB,MAAO7C,EAASwD,MAAO3C,EAAagD,MACjFvD,UAAWJ,EAAMI,UACjB4C,cAAehD,EAAMgD,gBAAiB,EACtC3B,SAAUV,EAAagD,QAGHxC,CAAuBuB,GAUtCkB,EAAoBzC,aARP,SAACO,EAAoB1B,GAC3C,MAAO,CACH2C,MAAOY,EAAkBN,EAAcvB,EAAMiB,MAAO7C,EAASwD,MAAO3C,EAAakD,UACjFzD,UAAWJ,EAAMI,UACjB4C,cAAehD,EAAMgD,gBAAiB,EACtC3B,SAAUV,EAAakD,YAGE1C,CAA2BuB,GAU/CoB,EAAmB3C,aARN,SAACO,EAAoB1B,GAC3C,MAAO,CACH2C,MAAOY,EAAkBN,EAAcvB,EAAMiB,MAAO7C,EAASwD,MAAO3C,EAAaoD,UACjF3D,UAAWJ,EAAMI,UACjB4C,cAAehD,EAAMgD,gBAAiB,EACtC3B,SAAUV,EAAaoD,YAGC5C,CAA2BuB,GC3E5CsB,EAjCG,WACd,OAAO,6BAAS5D,UAAU,iBACtB,yBAAKA,UAAU,UACX,wBAAIA,UAAU,mBAAd,wBACA,2BACI,6CAAkB,6BAClB,2BAAOA,UAAU,mBAAjB,4BAAgE,6BAFpE,gBAKA,2BACI,6CAAqB,6BACrB,2BAAOA,UAAU,mBAAjB,0BAAiE,6BAFrE,gBAKA,2BACI,qCAAa,6BACb,2BAAOA,UAAU,mBAAjB,6BAAoE,6BAFxE,eAKA,2BACI,+DAAoC,6BACpC,2BAAOA,UAAU,mBAAjB,2BAAkE,6BAFtE,gBAKA,2BACI,2CAAmB,6BACnB,2BAAOA,UAAU,mBAAjB,4BAAgE,6BAFpE,kBCVG6D,EAZF,WACT,OAAO,0BAAM7D,UAAU,YACnB,yBAAKA,UAAU,uBACX,wCACA,kBAACgD,EAAD,CAAgBhD,UAAU,SAE9B,yBAAKA,UAAU,iDACX,kBAAC,EAAD,SCEN8D,EAAS,SAAClE,GACZ,OAAO,4BAAQI,UAAW,OAASJ,EAAMI,WACrC,yBAAKA,UAAU,6DACX,kBAAC,IAAD,CAAMH,GAAG,IAAIG,UAAU,gBAAvB,QACA,6BAASA,UAAU,sBACf,kBAAC,IAAD,CAAMH,GAAG,IAAIG,UAAU,iBAAvB,UACCJ,EAAMmE,KACH,oCACI,kBAAC,IAAD,CAAMlE,GAAG,SAASG,UAAU,iBAA5B,SACA,uBACIgE,KAAK,IACLhE,UAAU,6CACVqC,QAASzC,EAAMqE,UACf,qDAGR,kBAAC,IAAD,CAAMpE,GAAG,SAASG,UAAU,iBAA5B,yBAqBPkE,EAAiBnD,aAZP,SAACO,GACpB,MAAO,CACHyC,KAAMzC,EAAMyC,SAIM,SAAC/C,GACvB,MAAO,CACHiD,SAAU,kBAAMjD,ELlBb,CACHG,KAAMR,QKqBgBI,CAA2C+C,GC3C5DK,EAAc,SAACvE,GACxB,OAAO,yBAAKI,UAAU,mBAClB,yBAAKA,UAAU,UACVJ,EAAMwE,SAAS5B,OAAS,EAAI5C,EAAMwE,SAAS3B,KAAI,SAACM,EAAGsB,GAAJ,OAC5C,yBAAKrE,UAAU,gCAAgC2C,IAAK0B,GAChD,2BAAOrE,UAAU,cAAc+C,EAAE7C,gBAAgBC,kBACjD,uBAAGH,UAAU,QAAO,qCAAO+C,EAAE3C,OAAT,kBACpB,uBAAGJ,UAAU,YAAY+C,EAAE1C,aACrB,uBAAGL,UAAU,YAAb,wCCEbsE,EAAb,2MACIC,OAAS,WACL,OAAK,EAAK3E,MAAMmE,KAOT,0BAAM/D,UAAU,kBAAkB+B,SAAU,EAAKyC,cACpD,yBAAKxE,UAAU,qBACX,8BAAUiC,SAAU,EAAKwC,gBAAiBzE,UAAU,eAAekC,KAAM,EAAGC,MAAO,CAAEC,OAAQ,WAEjG,yBAAKpC,UAAU,qBACX,2BAAOmB,KAAK,SAASW,MAAM,WAAW9B,UAAU,sBAX7C,yBAAKA,UAAU,OAClB,yBAAKA,UAAU,UACX,uBAAGA,UAAU,QAAb,qCALpB,EAmBIyE,gBAAkB,SAAChD,GACfA,EAAEO,iBACF,EAAKT,SAAS,CAAElB,QAASoB,EAAEC,OAAOI,SArB1C,EAwBI0C,aAAe,SAAC/C,GACZA,EAAEO,iBACFP,EAAEiD,cAAcC,QAFoC,IAG5CtE,EAAY,EAAKiB,MAAjBjB,QAH4C,EAIb,EAAKT,MAApCgF,EAJ4C,EAI5CA,OAAQb,EAJoC,EAIpCA,MAEhBS,EANoD,EAI9BA,cAETI,EAAQb,EAAO1D,IA9BpC,6BAAiCwE,aA+CpBC,EAAsB/D,aAbP,SAACO,EAAoB1B,GAC7C,MAAO,CACHgF,OAAQhF,EAAMgF,OACdb,KAAMzC,EAAMyC,SAIW,SAAC/C,GAC5B,MAAO,CACHwD,aAAc,SAACI,EAAgBb,EAAc1D,GAA/B,OAAmDW,EPxDxC,SAAC4D,EAAgBxE,EAAgBC,GAC9D,MAAO,CACHc,KAAMX,EACNoE,OAAQA,EACRxE,OAAQA,EACRC,QAASA,GOmDiE0E,CAAkBH,EAAQb,EAAM1D,QAI/EU,CAAqDuD,GC9B3EU,EAAyBjE,aAPP,SAACO,EAAoB1B,GAChD,MAAO,CACHgF,OAAQhF,EAAMgF,OACdR,SAAU9C,EAAMiB,MAAM0C,MAAK,SAAAlC,GAAC,OAAIA,EAAEjD,KAAOF,EAAMgF,UAASR,UAAY,MAItCrD,EAtBR,SAACnB,GAC3B,OAAO,yBAAKI,UAAU,sBAClB,yBAAKA,UAAU,SACX,wBAAIA,UAAU,QAAd,eACA,yBAAKA,UAAU,qBAAqBmC,MAAO,CAAE+C,OAAQ,QAASC,UAAW,SAAUC,UAAW,WAC1F,kBAAC,EAAD,CAAahB,SAAUxE,EAAMwE,aAGrC,yBAAKpE,UAAU,SACX,wBAAIA,UAAU,QAAd,aACA,kBAAC8E,EAAD,CAAqBF,OAAQhF,EAAMgF,cCezCS,EAAmBtE,aAbH,SAACO,EAAoB1B,GACvC,IAAM8C,EAAOpB,EAAMiB,MAAM0C,MAAK,SAAAlC,GAAC,OAAIA,EAAEjD,KAAOF,EAAME,MAClD,OAAY,MAAR4C,EAAuBA,EACpB,CACH5C,IAAK,EACLM,OAAQ,GACRH,MAAO,GACPI,QAAS,GACTH,gBAAiB,IAAIoF,KAAK,GAC1BrE,SAAUV,EAAa8C,QACvBlC,KAAMzB,EAASwD,QAGEnC,EA1BD,SAACnB,GACrB,OAAO,6BAASI,UAAU,qBACtB,yBAAKA,UAAU,yBACX,4BAAKJ,EAAMK,OACX,uBAAGD,UAAU,qCAAb,uBAAkEJ,EAAMM,gBAAgBC,iBAAxF,gBAAgHP,EAAMQ,SACtH,2BAAIR,EAAMS,UAEd,yBAAKL,UAAU,eACX,kBAACgF,EAAD,CAAwBJ,OAAQhF,EAAME,UAoBrCyF,EAAiB,WAAO,IAC3BzF,EAAO0F,cAAP1F,GACN,OAAO,kBAACuF,EAAD,CAAkBvF,GAAI2F,SAAS3F,MCtC7B4F,EAAgB,WAAO,IAC1BC,EAAaC,cAAbD,SACN,OAAO,6BAAS3F,UAAU,gCACtB,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,mCACX,kBAAC,IAAD,CAAMA,UAAU,8CAA8CH,GAAE,UAAK8F,EAAL,aAC5D,uBAAG3F,UAAU,yBAA2B,6BAD5C,WAIA,kBAAC,IAAD,CAAMA,UAAU,8CAA8CH,GAAE,UAAK8F,EAAL,UAC5D,uBAAG3F,UAAU,+BAAiC,6BADlD,SAIA,kBAAC,IAAD,CAAMA,UAAU,8CAA8CH,GAAE,UAAK8F,EAAL,eAC5D,uBAAG3F,UAAU,iCAAmC,6BADpD,aAIA,kBAAC,IAAD,CAAMA,UAAU,8CAA8CH,GAAE,UAAK8F,EAAL,cAC5D,uBAAG3F,UAAU,sBAAwB,6BADzC,gBCZH6F,EAAY,SAACjG,GACtB,OAAO,kBAAC,WAAD,KACH,wBAAII,UAAU,aAAaJ,EAAMK,OAChCL,EAAMkG,WCyBTC,EAAa,IAAIT,KACvBS,EAAWC,YAAYD,EAAWE,cAAgB,IAClD,IAAMC,EAAOH,EAAWI,cAAc7F,MAAM,EAAG,IACzCO,GAAe,CACjBuF,MAAO,GACPC,OAAQ,CACJC,MAAOJ,IAuHFK,GAAoBxF,YAAQ,MAPZ,SAACC,GAC1B,MAAO,CACHwF,SAAU,SAACC,GAAD,OAAuBzF,EZ/IZ,SAACyF,GAC1B,OAAO,EAAP,CACItF,KAAMV,GACHgG,GY4IuCC,CAAcD,KACxDE,QAAS,SAACF,GAAD,OAAkDzF,EZzIvC,SAACyF,GACzB,OAAO,EAAP,CACItF,KAAMT,GACH+F,GYsIiEG,CAAaH,QAIxD1F,EAnHR,SAACnB,GAA4B,IAAD,EACvByB,mBAA0BR,IADH,mBAC1CS,EAD0C,KACnCC,EADmC,KAGjD,SAASsF,EAAepF,GACpB,OAAQA,EAAEC,OAAOC,MACb,IAAK,YACDJ,EAASK,IAAON,EAAO,CAAE+E,OAAQ,CAAES,UAAW,CAAEjF,KAAMJ,EAAEC,OAAOI,WAC/D,MACJ,IAAK,WACDP,EAASK,IAAON,EAAO,CAAE+E,OAAQ,CAAEU,SAAU,CAAElF,KAAMJ,EAAEC,OAAOI,WAC9D,MACJ,IAAK,QACDP,EAASK,IAAON,EAAO,CAAE+E,OAAQ,CAAEW,MAAO,CAAEnF,KAAMJ,EAAEC,OAAOI,WAC3D,MACJ,IAAK,QACDP,EAASK,IAAON,EAAO,CAAE+E,OAAQ,CAAEC,MAAO,CAAEzE,KAAMJ,EAAEC,OAAOI,WAC3D,MACJ,IAAK,WACDP,EAASK,IAAON,EAAO,CAAE+E,OAAQ,CAAEY,SAAU,CAAEpF,KAAMJ,EAAEC,OAAOI,WAC9D,MACJ,IAAK,WACDP,EAASK,IAAON,EAAO,CAAE+E,OAAQ,CAAEa,SAAU,CAAErF,KAAMJ,EAAEC,OAAOI,YAK1E,SAASqF,EAAc1F,GACnB,OAAQA,EAAEC,OAAOC,MACb,IAAK,WACDJ,EAASK,IAAON,EAAO,CAAE8E,MAAO,CAAEa,SAAU,CAAEpF,KAAMJ,EAAEC,OAAOI,WAC7D,MACJ,IAAK,WACDP,EAASK,IAAON,EAAO,CAAE8E,MAAO,CAAEc,SAAU,CAAErF,KAAMJ,EAAEC,OAAOI,YAsBzE,OAAO,0BAAM9B,UAAU,iBACnB,6BAASA,UAAU,0BACf,wBAAIA,UAAU,QAAd,eACA,0BAAMA,UAAU,OACZ,yBAAKA,UAAU,uBACX,0CACA,2BAAOmB,KAAK,OAAOW,MAAOR,EAAM+E,OAAOS,UAAW9G,UAAU,eAAeiC,SAAU4E,EAAgBlF,KAAK,eAE9G,yBAAK3B,UAAU,uBACX,4CACA,2BAAOmB,KAAK,OAAOW,MAAOR,EAAM+E,OAAOU,SAAU/G,UAAU,eAAeiC,SAAU4E,EAAgBlF,KAAK,cAE7G,yBAAK3B,UAAU,gBACf,yBAAKA,UAAU,uBACX,yDACA,2BAAOmB,KAAK,QAAQW,MAAOR,EAAM+E,OAAOW,MAAOhH,UAAU,eAAeiC,SAAU4E,EAAgBlF,KAAK,WAE3G,yBAAK3B,UAAU,uBACX,uDACA,2BAAOmB,KAAK,OAAOW,MAAOR,EAAM+E,OAAOC,MAAQc,IAAKlB,EAAMlG,UAAU,eAAeiC,SAAU4E,EAAgBlF,KAAK,WAEtH,yBAAK3B,UAAU,gBACf,yBAAKA,UAAU,uBACX,qDACA,2BAAOmB,KAAK,OAAOW,MAAOR,EAAM+E,OAAOY,SAAUjH,UAAU,eAAeiC,SAAU4E,EAAgBlF,KAAK,cAE7G,yBAAK3B,UAAU,uBACX,iDACA,2BAAOmB,KAAK,WAAWW,MAAOR,EAAM+E,OAAOa,SAAUlH,UAAU,eAAeiC,SAAU4E,EAAgBlF,KAAK,cAEjH,yBAAK3B,UAAU,0BACX,kBAAC,IAAD,CAAMH,GAAG,kBAAkBG,UAAU,kBAAkBqC,QAhDvE,WACI,IAAMoE,EAAoB,CACtBK,UAAWxF,EAAM+E,OAAOS,UACxBC,SAAUzF,EAAM+E,OAAOU,SACvBC,MAAO1F,EAAM+E,OAAOW,MACpBV,MAAOhF,EAAM+E,OAAOC,MACpBW,SAAU3F,EAAM+E,OAAOY,SACvBC,SAAU5F,EAAM+E,OAAOa,UAG3BtH,EAAM4G,SAASC,KAsCH,kBAIZ,6BAASzG,UAAU,aACf,wBAAIA,UAAU,QAAd,qBACA,0BAAMA,UAAU,OACZ,yBAAKA,UAAU,uBACX,qDACA,2BAAOmB,KAAK,OAAOW,MAAOR,EAAM8E,MAAMa,SAAUjH,UAAU,eAAeiC,SAAUkF,EAAexF,KAAK,cAE3G,yBAAK3B,UAAU,uBACX,iDACA,2BAAOmB,KAAK,WAAWW,MAAOR,EAAM8E,MAAMc,SAAUlH,UAAU,eAAeiC,SAAUkF,EAAexF,KAAK,cAE/G,yBAAK3B,UAAU,0BACX,kBAAC,IAAD,CAAMH,GAAG,IAAIG,UAAU,kBAAkBqC,QAnDzD,WACIzC,EAAM+G,QAAQ,CAAEM,SAAU3F,EAAM8E,MAAMa,SAAWC,SAAU5F,EAAM8E,MAAMc,aAkD3D,4BCjJPG,GAAgB,WACzB,OAAO,yBAAKrH,UAAU,WAClB,wBAAIA,UAAU,QAAd,sCACA,uBAAGA,UAAU,YAAb,oOC+COsH,G,2MAxCX/C,OAAS,WACL,OAAO,6BAASvE,UAAU,uBACtB,kBAAC,IAAD,KACI,kBAACkE,EAAD,CAAgBlE,UAAU,SAC1B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOuH,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,OACtB,kBAAC,IAAD,CAAOA,KAAK,cAAa,kBAAC,EAAD,OACzB,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAAS,kBAAC,EAAD,OAC3B,kBAAC,IAAD,CAAOA,KAAK,kBACR,kBAAC,EAAD,CAAWvH,MAAM,gBACb,kBAACmD,EAAD,CAAiBpD,UAAU,UAGnC,kBAAC,IAAD,CAAOwH,KAAK,eACR,kBAAC,EAAD,CAAWvH,MAAM,iBACb,kBAACqD,EAAD,CAActD,UAAU,MAAM4C,eAAe,MAGrD,kBAAC,IAAD,CAAO4E,KAAK,oBACR,kBAAC,EAAD,CAAWvH,MAAM,qBACb,kBAACuD,EAAD,CAAmBxD,UAAU,MAAM4C,eAAe,MAG1D,kBAAC,IAAD,CAAO4E,KAAK,mBACR,kBAAC,EAAD,CAAWvH,MAAM,iBACb,kBAACyD,EAAD,CAAkB1D,UAAU,MAAM4C,eAAe,MAGzD,kBAAC,IAAD,CAAO4E,KAAK,UACR,kBAACjB,GAAD,OAEJ,kBAAC,IAAD,CAAOiB,KAAK,mBACR,kBAAC,GAAD,W,6BAjCNC,IAAM5C,WCCJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCZAjH,GAA4B,CAC9BkH,YAAY,EACZC,MAAO,CACH,CACIf,SAAU,UACVC,SAAU,aAGlB3E,MAAO,CACH,CACIzC,GAAI,EACJM,OAAQ,QACRH,MAAO,OACPI,QAAS,+GACTH,gBAAiB,IAAIoF,KACrBrE,SAAUV,EAAa0H,aACvB9G,KAAMzB,EAASuD,OACfmB,SAAU,CACN,CACIhE,OAAQ,mBACRC,QAAS,aACTH,gBAAiB,IAAIoF,QAIjC,CACIxF,GAAI,EACJM,OAAQ,UACRH,MAAO,iBACPI,QAAS,gHACTH,gBAAiB,IAAIoF,KACrBrE,SAAUV,EAAa8C,QACvBlC,KAAMzB,EAASwD,QCnC3B,IAEegF,GAFCC,cDwCD,WAAgG,IAA1E7G,EAAyE,uDAApDT,GAAcuH,EAAsC,uCAC1G,OAAQA,EAAOjH,MACX,KAAKX,EACD,OAAOoB,IAAON,EAAO,CACjBiB,MAAM,eACD6F,EAAOxD,OAAS,CACbR,SAAU,CACNiE,MAAO,CACH,CACIjI,OAAQgI,EAAOhI,OACfC,QAAS+H,EAAO/H,QAChBH,gBAAiB,IAAIoF,YAOjD,KAAK7E,EACD,OAAOmB,IAAON,EAAO,CACjB0G,MAAO,CACHK,MAAO,CACH,CACIpB,SAAUmB,EAAOnB,SACjBC,SAAUkB,EAAOlB,cAKrC,KAAKxG,EACD,OAAOkB,IAAON,EAAO,CACjByG,WAAY,CAAElG,MAAM,GACpBkC,KAAM,CAAElC,KAAMuG,EAAOnB,YAG7B,KAAKtG,EACD,OAAOiB,IAAON,EAAO,CACjByG,WAAY,CAAElG,MAAM,GACpBkC,KAAM,CAAElC,UAAMyG,KAEtB,KAAK1H,EACD,OAAOgB,IAAON,EAAO,CACjBiB,MAAO,CACH8F,MAAO,CACH,CACIvI,GAAIwB,EAAMiB,MAAMC,OAChBvC,MAAOmI,EAAOnI,MACdI,QAAS+H,EAAO/H,QAChB+D,SAAU,GACVhE,OAAQkB,EAAMyC,MAAQ,GACtB9C,SAAUmH,EAAOnH,SACjBE,KAAMzB,EAASwD,KACfhD,gBAAiB,IAAIoF,UAKzC,QACI,OAAOhE,ME7FnBiH,IAAShE,OACL,kBAAC,IAAD,CAAUiE,MAAON,IACb,kBAAC,GAAD,OAEJO,SAASC,eAAe,SH6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6fb7a04e.chunk.js","sourcesContent":["enum PostType {\r\n    User,\r\n    System\r\n}\r\n\r\nexport default PostType;","import React from 'react';\r\nimport { IPost } from '../State/IPost';\r\nimport { Link } from 'react-router-dom';\r\nimport '../static/PostSummary.css';\r\n\r\nexport type PostSummaryProps = IPost & {};\r\n\r\nexport const PostSummary = (props: PostSummaryProps) => {\r\n    return <Link to={`/posts/${props.id.toString()}`} >\r\n        <article className='PostSummary row border rounded mb-4 p-2'>\r\n            <div className='col-6'>\r\n                <h4>{props.title}</h4>\r\n            </div>\r\n            <div className='col-6 text-right'>\r\n                <small className='text-muted'>{`Publicado el ${props.publicationDate.toLocaleString()} por ${props.author}`}</small>\r\n            </div>\r\n            <div className='col-12 py-2 text-justify'>\r\n                {props.content.slice(0, 120)}\r\n            </div>\r\n        </article>\r\n    </Link >;\r\n};","enum PostCategory {\r\n    General,\r\n    Help,\r\n    Question,\r\n    Offtopic,\r\n    Announcement\r\n}\r\n\r\nexport default PostCategory;","import PostCategory from \"./PostCategory\";\r\n\r\nexport const ADD_COMMENT = 'ADD_COMMENT';\r\nexport const SIGNUP = 'SIGNUP';\r\nexport const LOGIN = 'LOGIN';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const ADD_POST = 'ADD_POST';\r\n\r\nexport interface IAddCommentAction {\r\n    type: typeof ADD_COMMENT;\r\n    postId: number;\r\n    content: string;\r\n    author: string;\r\n}\r\n\r\nexport interface ISignupAction {\r\n    type: typeof SIGNUP;\r\n    firstName: string;\r\n    lastName: string;\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    birth: string;\r\n}\r\n\r\nexport interface ILoginAction {\r\n    type: typeof LOGIN;\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nexport interface ILogoutAction {\r\n    type: typeof LOGOUT;\r\n}\r\n\r\nexport interface IAddPostAction {\r\n    type: typeof ADD_POST;\r\n    title: string;\r\n    content: string;\r\n    category: PostCategory;\r\n}\r\n\r\nexport type StoreActionType = IAddCommentAction | ISignupAction | ILoginAction | ILogoutAction | IAddPostAction;","import { IAddCommentAction, ADD_COMMENT, ISignupAction, SIGNUP, ILoginAction, LOGIN, ILogoutAction, LOGOUT, IAddPostAction, ADD_POST } from './StoreActionType';\r\nimport { ISignupInfo } from '../Components/LoginPage';\r\nimport PostCategory from './PostCategory';\r\n\r\nexport const addCommentBuilder = (postId: number, author: string, content: string): IAddCommentAction => {\r\n    return {\r\n        type: ADD_COMMENT,\r\n        postId: postId,\r\n        author: author,\r\n        content: content\r\n    };\r\n};\r\n\r\nexport const signupBuilder = (info: ISignupInfo): ISignupAction => {\r\n    return {\r\n        type: SIGNUP,\r\n        ...info\r\n    };\r\n};\r\n\r\nexport const loginBuilder = (info: { username: string, password: string }): ILoginAction => {\r\n    return {\r\n        type: LOGIN,\r\n        ...info\r\n    };\r\n};\r\n\r\nexport const logoutBuilder = (): ILogoutAction => {\r\n    return {\r\n        type: LOGOUT\r\n    };\r\n};\r\n\r\nexport const addPostBuilder = (title: string, content: string, category: PostCategory): IAddPostAction => {\r\n    return {\r\n        type: ADD_POST,\r\n        title: title,\r\n        content: content,\r\n        category: category\r\n    };\r\n};","import React, { useState } from 'react';\r\nimport PostCategory from '../State/PostCategory';\r\nimport update from 'immutability-helper';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { addPostBuilder } from '../State/ActionCreators';\r\n\r\ninterface IPostingFormProps {\r\n    category: PostCategory;\r\n    onPost: (title: string, content: string) => void;\r\n}\r\n\r\ninterface IPostingFormState {\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nconst initialState = {\r\n    title: '',\r\n    content: ''\r\n};\r\n\r\nexport const PostingForm = (props: IPostingFormProps) => {\r\n    const [state, setState] = useState<IPostingFormState>(initialState);\r\n\r\n    function onInputChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        switch (e.target.name) {\r\n            case 'title':\r\n                setState(update(state, { title: { $set: e.target.value } }));\r\n                return;\r\n            case 'content':\r\n                setState(update(state, { content: { $set: e.target.value } }));\r\n                return;\r\n        }\r\n    }\r\n\r\n    function onPost() {\r\n        const { title, content } = state;\r\n        props.onPost(title, content);\r\n    }\r\n\r\n    return <form className='row PostingForm' onSubmit={(e) => e.preventDefault()}>\r\n        <div className='col-12 mb-3'>\r\n            <label>Título:</label>\r\n            <input type='text' name='title' value={state.title} className='form-control' onChange={onInputChange} />\r\n        </div>\r\n        <div className='col-12 mb-3'>\r\n            <label>Contenido:</label>\r\n            <textarea name='content' rows={5} value={state.content} style={{ resize: 'none' }} className='form-control' onChange={onInputChange}></textarea>\r\n        </div>\r\n        <div className='col-12 text-right'>\r\n            <button className='btn btn-primary' onClick={onPost}>Publicar</button>\r\n        </div>\r\n    </form>;\r\n};\r\n\r\nconst mapPostingFormDispatch = (dispatch: Dispatch, props: { category: PostCategory }) => {\r\n    return {\r\n        category: props.category,\r\n        onPost: (title: string, content: string) => dispatch(addPostBuilder(title, content, props.category))\r\n    };\r\n};\r\n\r\nexport const EnhancedPostingForm = connect(null, mapPostingFormDispatch)(PostingForm);","import React from 'react';\r\nimport { IPost } from '../State/IPost';\r\nimport { PostSummary } from './PostSummary';\r\nimport { connect } from 'react-redux';\r\nimport IStoreState from '../State/IStoreState';\r\nimport { WithClassName } from './WithClassName';\r\nimport PostType from '../State/PostType';\r\nimport PostCategory from '../State/PostCategory';\r\nimport { EnhancedPostingForm } from './PostingForm';\r\n\r\nexport type PostFeedProps = WithClassName<{\r\n    posts: IPost[],\r\n    category?: PostCategory,\r\n    publicPosting: boolean\r\n}>;\r\n\r\nexport const PostFeed = (props: PostFeedProps) => {\r\n    return <section className={'PostFeed row ' + props.className}>\r\n        <div className='col'>\r\n            {props.posts.length > 0 && props.posts.map(post =>\r\n                <PostSummary\r\n                    key={post.id}\r\n                    id={post.id}\r\n                    author={post.author}\r\n                    title={post.title}\r\n                    content={post.content}\r\n                    publicationDate={post.publicationDate}\r\n                    category={post.category}\r\n                    type={post.type} />\r\n            )}\r\n            {props.posts.length <= 0 && <p className='lead'>No hay nada por aquí</p>}\r\n        </div>\r\n        {props.publicPosting && <>\r\n            <div className='col-1 border-right'></div>\r\n            <div className='col-4'>\r\n                <h4 className='mb-4'>¿Algo que quieras compartir?</h4>\r\n                <EnhancedPostingForm category={props.category!} />\r\n            </div>\r\n        </>}\r\n    </section>;\r\n};\r\n\r\nfunction getPostByType(posts: IPost[], type: PostType): IPost[] {\r\n    return posts.filter(x => x.type === type);\r\n}\r\n\r\ntype hocProps = WithClassName<{\r\n    publicPosting?: boolean\r\n}>;\r\n\r\nconst systemFeedProps = (state: IStoreState, props: hocProps): PostFeedProps => {\r\n    return {\r\n        posts: getPostByType(state.posts, PostType.System),\r\n        className: props.className,\r\n        publicPosting: props.publicPosting || false\r\n    };\r\n};\r\nexport const SystemPostFeed = connect(systemFeedProps)(PostFeed);\r\n\r\nconst userFeedProps = (state: IStoreState, props: hocProps): PostFeedProps => {\r\n    return {\r\n        posts: getPostByType(state.posts, PostType.User),\r\n        className: props.className,\r\n        publicPosting: props.publicPosting || false\r\n    };\r\n};\r\nexport const UserPostFeed = connect(userFeedProps)(PostFeed);\r\n\r\nfunction getPostByCategory(posts: IPost[], category: PostCategory): IPost[] {\r\n    return posts.filter(x => x.category === category);\r\n}\r\n\r\nconst generalFeedProps = (state: IStoreState, props: hocProps): PostFeedProps => {\r\n    return {\r\n        posts: getPostByCategory(getPostByType(state.posts, PostType.User), PostCategory.General),\r\n        className: props.className,\r\n        publicPosting: props.publicPosting || false,\r\n        category: PostCategory.General\r\n    };\r\n};\r\nexport const GeneralPostFeed = connect(generalFeedProps)(PostFeed);\r\n\r\nconst helpFeedProps = (state: IStoreState, props: hocProps): PostFeedProps => {\r\n    return {\r\n        posts: getPostByCategory(getPostByType(state.posts, PostType.User), PostCategory.Help),\r\n        className: props.className,\r\n        publicPosting: props.publicPosting || false,\r\n        category: PostCategory.Help\r\n    };\r\n};\r\nexport const HelpPostFeed = connect(helpFeedProps)(PostFeed);\r\n\r\nconst questionFeedProps = (state: IStoreState, props: hocProps): PostFeedProps => {\r\n    return {\r\n        posts: getPostByCategory(getPostByType(state.posts, PostType.User), PostCategory.Question),\r\n        className: props.className,\r\n        publicPosting: props.publicPosting || false,\r\n        category: PostCategory.Question\r\n    };\r\n};\r\nexport const QuestionsPostFeed = connect(questionFeedProps)(PostFeed);\r\n\r\nconst offtopicFeedProps = (state: IStoreState, props: hocProps): PostFeedProps => {\r\n    return {\r\n        posts: getPostByCategory(getPostByType(state.posts, PostType.User), PostCategory.Offtopic),\r\n        className: props.className,\r\n        publicPosting: props.publicPosting || false,\r\n        category: PostCategory.Offtopic\r\n    };\r\n};\r\nexport const OfftopicPostFeed = connect(offtopicFeedProps)(PostFeed);","import React from 'react';\r\n\r\nconst HelpLines = () => {\r\n    return <section className='HelpLines row'>\r\n        <div className='col-12'>\r\n            <h4 className='text-muted mb-4'>¿Necesitas ayuda?</h4>\r\n            <p>\r\n                <b>Línea Libre</b><br />\r\n                <small className='ml-2 text-muted'>Orientación emocional</small><br />\r\n                600 360 7777\r\n            </p>\r\n            <p>\r\n                <b>Salud Responde</b><br />\r\n                <small className='ml-2 text-muted'>Autolesiones, suicidio</small><br />\r\n                600 360 7777\r\n            </p>\r\n            <p>\r\n                <b>Sename</b><br />\r\n                <small className='ml-2 text-muted'>Serv. Nacional de Menores</small><br />\r\n                800 730 800\r\n            </p>\r\n            <p>\r\n                <b>Superintendencia de Educación</b><br />\r\n                <small className='ml-2 text-muted'>Bullying, acoso escolar</small><br />\r\n                600 600 2626\r\n            </p>\r\n            <p>\r\n                <b>FonoInfancia</b><br />\r\n                <small className='ml-2 text-muted'>Orientación emocional</small><br />\r\n                800 200 818\r\n            </p>\r\n        </div>\r\n    </section>;\r\n};\r\n\r\nexport default HelpLines;","import React from 'react';\r\nimport { SystemPostFeed } from './PostFeed';\r\nimport HelpLines from './HelpLines';\r\n\r\nconst Home = () => {\r\n    return <main className='Home row'>\r\n        <div className='col-12 col-md-8 p-4'>\r\n            <h2>Anuncios</h2>\r\n            <SystemPostFeed className='p-4' />\r\n        </div>\r\n        <div className='col-12 col-md-4 order-first order-md-last p-4'>\r\n            <HelpLines />\r\n        </div>\r\n    </main>;\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { WithClassName } from './WithClassName';\r\nimport IStoreState from '../State/IStoreState';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { logoutBuilder } from '../State/ActionCreators';\r\n\r\ninterface IHeaderProps {\r\n    user?: string;\r\n    onLogout: () => void;\r\n}\r\n\r\nconst Header = (props: WithClassName<IHeaderProps>) => {\r\n    return <header className={'row ' + props.className}>\r\n        <nav className='col-12 navbar navbar-light bg-light px-5 navbar-expand-md'>\r\n            <Link to='/' className='navbar-brand'>Logo</Link>\r\n            <section className='ml-auto navbar-nav'>\r\n                <Link to='/' className='nav-link ml-3'>Inicio</Link>\r\n                {props.user ?\r\n                    <>\r\n                        <Link to='/forum' className='nav-link ml-3'>Foros</Link>\r\n                        <a\r\n                            href='/'\r\n                            className='text-danger nav-link ml-3 border-left pl-4'\r\n                            onClick={props.onLogout}>\r\n                            <small>Cerrar sesión</small>\r\n                        </a>\r\n                    </> :\r\n                    <Link to='/login' className='nav-link ml-3'>Iniciar sesión</Link>\r\n                }\r\n            </section>\r\n        </nav>\r\n    </header>;\r\n};\r\n\r\nexport default Header;\r\n\r\nconst mapHeaderProps = (state: IStoreState) => {\r\n    return {\r\n        user: state.user\r\n    };\r\n};\r\n\r\nconst mapHeaderDispatch = (dispatch: Dispatch) => {\r\n    return {\r\n        onLogout: () => dispatch(logoutBuilder())\r\n    };\r\n};\r\n\r\nexport const EnhancedHeader = connect(mapHeaderProps, mapHeaderDispatch)(Header);","import React from 'react';\r\nimport { IComment } from '../State/IComment';\r\n\r\ninterface ICommentFeedProps {\r\n    comments: IComment[];\r\n}\r\n\r\nexport const CommentFeed = (props: ICommentFeedProps) => {\r\n    return <div className='row CommentFeed'>\r\n        <div className='col-12'>\r\n            {props.comments.length > 0 ? props.comments.map((x, i) =>\r\n                <div className='mb-3 border rounded px-3 py-2' key={i}>\r\n                    <small className='text-muted'>{x.publicationDate.toLocaleString()}</small>\r\n                    <p className='mb-2'><b>{`${x.author} comentó:`}</b></p>\r\n                    <p className='mb-0 p-2'>{x.content}</p>\r\n                </div>) : <p className='lead p-2'>¡Sé el primero en comentar!</p>\r\n            }\r\n        </div>\r\n    </div>;\r\n};","import React from 'react';\r\nimport { addCommentBuilder } from '../State/ActionCreators';\r\nimport { connect } from 'react-redux';\r\nimport { Component } from 'react';\r\nimport IStoreState from '../State/IStoreState';\r\nimport { Dispatch } from 'redux';\r\n\r\ninterface ICommentFormProps {\r\n    postId: number;\r\n    user?: string;\r\n    onAddComment: (postId: number, user: string, content: string) => void;\r\n}\r\n\r\ninterface ICommentFormState {\r\n    content: string;\r\n}\r\n\r\nexport class CommentForm extends Component<ICommentFormProps, ICommentFormState> {\r\n    render = () => {\r\n        if (!this.props.user) {\r\n            return <div className='row'>\r\n                <div className='col-12'>\r\n                    <p className='lead'>Inicia sesión para comentar</p>\r\n                </div>\r\n            </div>;\r\n        }\r\n        return <form className='row CommentForm' onSubmit={this.onAddComment}>\r\n            <div className='col-12 form-group'>\r\n                <textarea onChange={this.onContentChange} className='form-control' rows={5} style={{ resize: 'none' }}></textarea>\r\n            </div>\r\n            <div className='col-12 text-right'>\r\n                <input type='submit' value='Comentar' className='btn btn-primary' />\r\n            </div>\r\n        </form>;\r\n    }\r\n\r\n    onContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        e.preventDefault();\r\n        this.setState({ content: e.target.value });\r\n    }\r\n\r\n    onAddComment = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        e.currentTarget.reset();\r\n        const { content } = this.state;\r\n        const { postId, user, onAddComment } = this.props;\r\n\r\n        onAddComment(postId, user!, content);\r\n    }\r\n}\r\n\r\nconst mapCommentFormProps = (state: IStoreState, props: { postId: number }) => {\r\n    return {\r\n        postId: props.postId,\r\n        user: state.user\r\n    };\r\n};\r\n\r\nconst mapCommentFormDispatch = (dispatch: Dispatch) => {\r\n    return {\r\n        onAddComment: (postId: number, user: string, content: string) => dispatch(addCommentBuilder(postId, user, content))\r\n    };\r\n};\r\n\r\nexport const EnhancedCommentForm = connect(mapCommentFormProps, mapCommentFormDispatch)(CommentForm);","import React from 'react';\r\nimport { IComment } from '../State/IComment';\r\nimport { CommentFeed } from './CommentFeed';\r\nimport { EnhancedCommentForm } from './CommentForm';\r\nimport IStoreState from '../State/IStoreState';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface ICommentSectionProps {\r\n    postId: number;\r\n    comments: IComment[];\r\n}\r\n\r\nexport const CommentSection = (props: ICommentSectionProps) => {\r\n    return <div className='row CommentSection'>\r\n        <div className='col-6'>\r\n            <h4 className='mb-4'>Comentarios</h4>\r\n            <div className='p-2 border rounded' style={{ height: '400px', overflowY: 'scroll', overflowX: 'hidden' }}>\r\n                <CommentFeed comments={props.comments} />\r\n            </div>\r\n        </div>\r\n        <div className='col-6'>\r\n            <h4 className='mb-4'>Comentar:</h4>\r\n            <EnhancedCommentForm postId={props.postId} />\r\n        </div>\r\n    </div>;\r\n};\r\n\r\nconst mapCommentSectionProps = (state: IStoreState, props: { postId: number }): ICommentSectionProps => {\r\n    return {\r\n        postId: props.postId,\r\n        comments: state.posts.find(x => x.id === props.postId)!.comments || []\r\n    };\r\n};\r\n\r\nexport const EnhancedCommentSection = connect(mapCommentSectionProps)(CommentSection);","import React from 'react';\r\nimport { IPost } from '../State/IPost';\r\nimport IStoreState from '../State/IStoreState';\r\nimport PostCategory from '../State/PostCategory';\r\nimport PostType from '../State/PostType';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { EnhancedCommentSection } from './CommentSection';\r\n\r\nexport type PostPageProps = IPost & {};\r\n\r\nexport const PostPage = (props: PostPageProps) => {\r\n    return <section className='PostPage row p-4 '>\r\n        <div className='col-12 mb-4 px-4 mb-5'>\r\n            <h2>{props.title}</h2>\r\n            <p className='mb-4 font-weight-light text-muted'>{`Publicado el ${props.publicationDate.toLocaleString()} por ${props.author}`}</p>\r\n            <p>{props.content}</p>\r\n        </div>\r\n        <div className='col-12 px-4'>\r\n            <EnhancedCommentSection postId={props.id} />\r\n        </div>\r\n    </section>;\r\n};\r\n\r\nconst postPageProps = (state: IStoreState, props: { id: number }): PostPageProps => {\r\n    const post = state.posts.find(x => x.id === props.id);\r\n    if (post != null) { return post; }\r\n    return {\r\n        id: -1,\r\n        author: '',\r\n        title: '',\r\n        content: '',\r\n        publicationDate: new Date(0),\r\n        category: PostCategory.General,\r\n        type: PostType.User\r\n    };\r\n};\r\nconst EnhancedPostPage = connect(postPageProps)(PostPage);\r\n\r\nexport const IdentifiedPost = () => {\r\n    let { id } = useParams();\r\n    return <EnhancedPostPage id={parseInt(id!)} />;\r\n};","import React from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nexport const ForumSelector = () => {\r\n    let { pathname } = useLocation();\r\n    return <section className='ForumSelector row p-0 p-xl-5'>\r\n        <div className='col-12 navbar navbar-expand-xl'>\r\n            <div className='navbar-nav mx-auto mt-0 mt-xl-5'>\r\n                <Link className='display-4 navbar-link mx-5 my-3 text-center' to={`${pathname}/general`}>\r\n                    <i className='fas fa-archive fa-xs'></i><br />\r\n                    General\r\n                </Link>\r\n                <Link className='display-4 navbar-link mx-5 my-3 text-center' to={`${pathname}/help`}>\r\n                    <i className='fas fa-hands-helping fa-xs'></i><br />\r\n                    Ayuda\r\n                </Link>\r\n                <Link className='display-4 navbar-link mx-5 my-3 text-center' to={`${pathname}/questions`}>\r\n                    <i className='fas fa-question-circle fa-xs'></i><br />\r\n                    Preguntas\r\n                </Link>\r\n                <Link className='display-4 navbar-link mx-5 my-3 text-center' to={`${pathname}/offtopic`}>\r\n                    <i className='fas fa-dice fa-xs'></i><br />\r\n                    Offtopic\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    </section>;\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { WithChildren } from './WithChildren';\r\nimport { WithClassName } from './WithClassName';\r\n\r\ninterface WithTitleProps {\r\n    title: string;\r\n}\r\n\r\nexport const WithTitle = (props: WithClassName<WithChildren<WithTitleProps>>) => {\r\n    return <Fragment>\r\n        <h1 className='mb-4 pl-3'>{props.title}</h1>\r\n        {props.children}\r\n    </Fragment>;\r\n};","import React, { useState } from 'react';\r\nimport update from 'immutability-helper';\r\nimport { Link } from 'react-router-dom';\r\nimport { Dispatch } from 'redux';\r\nimport { signupBuilder, loginBuilder } from '../State/ActionCreators';\r\nimport { connect } from 'react-redux';\r\n\r\nexport interface ISignupInfo {\r\n    firstName: string;\r\n    lastName: string;\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    birth: string;\r\n}\r\n\r\ninterface ILoginPageProps {\r\n    onSignup: (info: ISignupInfo) => void;\r\n    onLogin: (info: { username: string, password: string }) => void;\r\n}\r\n\r\ninterface ILoginPageState {\r\n    signup: {\r\n        firstName?: string,\r\n        lastName?: string,\r\n        username?: string,\r\n        email?: string,\r\n        password?: string,\r\n        birth?: string\r\n    };\r\n    login: {\r\n        username?: string;\r\n        password?: string;\r\n    };\r\n}\r\n\r\nconst nowMinus16 = new Date();\r\nnowMinus16.setFullYear(nowMinus16.getFullYear() - 18);\r\nconst nm16 = nowMinus16.toISOString().slice(0, 10);\r\nconst initialState = {\r\n    login: {},\r\n    signup: {\r\n        birth: nm16\r\n    }\r\n};\r\n\r\nexport const LoginPage = (props: ILoginPageProps) => {\r\n    const [state, setState] = useState<ILoginPageState>(initialState);\r\n\r\n    function onSignupChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        switch (e.target.name) {\r\n            case 'firstName':\r\n                setState(update(state, { signup: { firstName: { $set: e.target.value } } }));\r\n                break;\r\n            case 'lastName':\r\n                setState(update(state, { signup: { lastName: { $set: e.target.value } } }));\r\n                break;\r\n            case 'email':\r\n                setState(update(state, { signup: { email: { $set: e.target.value } } }));\r\n                break;\r\n            case 'birth':\r\n                setState(update(state, { signup: { birth: { $set: e.target.value } } }));\r\n                break;\r\n            case 'username':\r\n                setState(update(state, { signup: { username: { $set: e.target.value } } }));\r\n                break;\r\n            case 'password':\r\n                setState(update(state, { signup: { password: { $set: e.target.value } } }));\r\n                break;\r\n        }\r\n    }\r\n\r\n    function onLoginChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        switch (e.target.name) {\r\n            case 'username':\r\n                setState(update(state, { login: { username: { $set: e.target.value } } }));\r\n                break;\r\n            case 'password':\r\n                setState(update(state, { login: { password: { $set: e.target.value } } }));\r\n                break;\r\n        }\r\n    }\r\n\r\n    function onSignup() {\r\n        const info: ISignupInfo = {\r\n            firstName: state.signup.firstName!,\r\n            lastName: state.signup.lastName!,\r\n            email: state.signup.email!,\r\n            birth: state.signup.birth!,\r\n            username: state.signup.username!,\r\n            password: state.signup.password!\r\n        };\r\n\r\n        props.onSignup(info);\r\n    }\r\n\r\n    function onLogin() {\r\n        props.onLogin({ username: state.login.username!, password: state.login.password! });\r\n    }\r\n\r\n    return <main className='row LoginPage'>\r\n        <section className='col-6 p-4 border-right'>\r\n            <h3 className='mb-5'>Registrarse</h3>\r\n            <form className='row'>\r\n                <div className='col-6 control-group'>\r\n                    <label>Nombre:</label>\r\n                    <input type='text' value={state.signup.firstName} className='form-control' onChange={onSignupChange} name='firstName' />\r\n                </div>\r\n                <div className='col-6 control-group'>\r\n                    <label>Apellido:</label>\r\n                    <input type='text' value={state.signup.lastName} className='form-control' onChange={onSignupChange} name='lastName' />\r\n                </div>\r\n                <div className='col-12 mb-3'></div>\r\n                <div className='col-6 control-group'>\r\n                    <label>Correo electrónico:</label>\r\n                    <input type='email' value={state.signup.email} className='form-control' onChange={onSignupChange} name='email' />\r\n                </div>\r\n                <div className='col-6 control-group'>\r\n                    <label>Fecha de nacimiento:</label>\r\n                    <input type='date' value={state.signup.birth!} max={nm16} className='form-control' onChange={onSignupChange} name='birth' />\r\n                </div>\r\n                <div className='col-12 mb-3'></div>\r\n                <div className='col-6 control-group'>\r\n                    <label>Nombre de usuario:</label>\r\n                    <input type='text' value={state.signup.username} className='form-control' onChange={onSignupChange} name='username' />\r\n                </div>\r\n                <div className='col-6 control-group'>\r\n                    <label>Contraseña:</label>\r\n                    <input type='password' value={state.signup.password} className='form-control' onChange={onSignupChange} name='password' />\r\n                </div>\r\n                <div className='col-12 text-right mt-3'>\r\n                    <Link to='/signup-forward' className='btn btn-primary' onClick={onSignup}>Registrarse</Link>\r\n                </div>\r\n            </form>\r\n        </section>\r\n        <section className='col-6 p-4'>\r\n            <h3 className='mb-5'>Iniciar Sesión</h3>\r\n            <form className='row'>\r\n                <div className='col-6 control-group'>\r\n                    <label>Nombre de usuario:</label>\r\n                    <input type='text' value={state.login.username} className='form-control' onChange={onLoginChange} name='username' />\r\n                </div>\r\n                <div className='col-6 control-group'>\r\n                    <label>Contraseña:</label>\r\n                    <input type='password' value={state.login.password} className='form-control' onChange={onLoginChange} name='password' />\r\n                </div>\r\n                <div className='col-12 text-right mt-3'>\r\n                    <Link to='/' className='btn btn-primary' onClick={onLogin}>Iniciar sesión</Link>\r\n                </div>\r\n            </form>\r\n        </section>\r\n    </main>;\r\n};\r\n\r\nconst mapLoginPageDispatch = (dispatch: Dispatch) => {\r\n    return {\r\n        onSignup: (info: ISignupInfo) => dispatch(signupBuilder(info)),\r\n        onLogin: (info: { username: string, password: string }) => dispatch(loginBuilder(info))\r\n    };\r\n};\r\n\r\nexport const EnhancedLoginPage = connect(null, mapLoginPageDispatch)(LoginPage);","import React from 'react';\r\n\r\nexport const SignupForward = () => {\r\n    return <div className='row p-4'>\r\n        <h3 className='mb-4'>¡Te has registrado exitsamente!</h3>\r\n        <p className='lead p-2'>Pero antes de ingresar necesitamos que hagas una cosa más. Te hemos enviado un correo para\r\n        que podamos verificar que eres tú el que se ha registrado. Luego de eso podrás usar la página sin ningún problema :)</p>\r\n    </div>;\r\n};","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport Home from './Components/Home';\nimport { EnhancedHeader } from './Components/Header';\nimport { IdentifiedPost } from './Components/PostPage';\nimport { ForumSelector } from './Components/ForumSelector';\nimport { GeneralPostFeed, HelpPostFeed, QuestionsPostFeed, OfftopicPostFeed } from './Components/PostFeed';\nimport { WithTitle } from './Components/WithTitle';\nimport { EnhancedLoginPage } from './Components/LoginPage';\nimport { SignupForward } from './Components/SignupForward';\n\nclass App extends React.Component {\n    render = () => {\n        return <section className='App container-fluid'>\n            <BrowserRouter>\n                <EnhancedHeader className='mb-5' />\n                <Switch>\n                    <Route exact path='/'><Home /></Route>\n                    <Route path='/posts/:id'><IdentifiedPost /></Route>\n                    <Route exact path='/forum'><ForumSelector /></Route>\n                    <Route path='/forum/general'>\n                        <WithTitle title='Foro General'>\n                            <GeneralPostFeed className='p-4' />\n                        </WithTitle>\n                    </Route>\n                    <Route path='/forum/help'>\n                        <WithTitle title='Foro de Ayuda'>\n                            <HelpPostFeed className='p-4' publicPosting={true} />\n                        </WithTitle>\n                    </Route>\n                    <Route path='/forum/questions'>\n                        <WithTitle title='Foro de Preguntas'>\n                            <QuestionsPostFeed className='p-4' publicPosting={true} />\n                        </WithTitle>\n                    </Route>\n                    <Route path='/forum/offtopic'>\n                        <WithTitle title='Foro Offtopic'>\n                            <OfftopicPostFeed className='p-4' publicPosting={true} />\n                        </WithTitle>\n                    </Route>\n                    <Route path='/login'>\n                        <EnhancedLoginPage />\n                    </Route>\n                    <Route path='/signup-forward'>\n                        <SignupForward />\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </section >;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import IStoreState from './IStoreState';\r\nimport PostCategory from './PostCategory';\r\nimport PostType from './PostType';\r\nimport { StoreActionType, ADD_COMMENT, SIGNUP, LOGIN, LOGOUT, ADD_POST } from './StoreActionType';\r\nimport update from 'immutability-helper';\r\n\r\nconst initialState: IStoreState = {\r\n    isLoggedIn: false,\r\n    users: [\r\n        {\r\n            username: 'sheemin',\r\n            password: 'hola1234'\r\n        }\r\n    ],\r\n    posts: [\r\n        {\r\n            id: 0,\r\n            author: 'Admin',\r\n            title: 'MVP!',\r\n            content: '¡Hemos alcanzado la primera versión de nuestra página! :) muchas gracias a todos los que nos apoyan',\r\n            publicationDate: new Date(),\r\n            category: PostCategory.Announcement,\r\n            type: PostType.System,\r\n            comments: [\r\n                {\r\n                    author: 'UnUsuarioReal256',\r\n                    content: ':OOO nice ',\r\n                    publicationDate: new Date()\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 1,\r\n            author: 'Sheemin',\r\n            title: 'Pues, hola (?)',\r\n            content: 'Bienvenidos al foro general, este foro es sobre todo para publicaciones meta y comentarios sobre los anuncios',\r\n            publicationDate: new Date(),\r\n            category: PostCategory.General,\r\n            type: PostType.User\r\n        }\r\n    ]\r\n};\r\n\r\nexport default function StoreReducer(state: IStoreState = initialState, action: StoreActionType): IStoreState {\r\n    switch (action.type) {\r\n        case ADD_COMMENT:\r\n            return update(state, {\r\n                posts: {\r\n                    [action.postId]: {\r\n                        comments: {\r\n                            $push: [\r\n                                {\r\n                                    author: action.author,\r\n                                    content: action.content,\r\n                                    publicationDate: new Date()\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        case SIGNUP:\r\n            return update(state, {\r\n                users: {\r\n                    $push: [\r\n                        {\r\n                            username: action.username,\r\n                            password: action.password\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n        case LOGIN:\r\n            return update(state, {\r\n                isLoggedIn: { $set: true },\r\n                user: { $set: action.username }\r\n            });\r\n\r\n        case LOGOUT:\r\n            return update(state, {\r\n                isLoggedIn: { $set: false },\r\n                user: { $set: undefined }\r\n            });\r\n        case ADD_POST:\r\n            return update(state, {\r\n                posts: {\r\n                    $push: [\r\n                        {\r\n                            id: state.posts.length,\r\n                            title: action.title,\r\n                            content: action.content,\r\n                            comments: [],\r\n                            author: state.user || '',\r\n                            category: action.category,\r\n                            type: PostType.User,\r\n                            publicationDate: new Date()\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport StoreReducer from './StoreReducer';\r\n\r\nconst MyStore = createStore(StoreReducer);\r\n\r\nexport default MyStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport MyStore from './State/MyStore';\n\nReactDOM.render(\n    <Provider store={MyStore}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}